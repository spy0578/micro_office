# -*- coding: utf-8 -*-
from flask.views import MethodView
from flask import Flask, request, make_response,redirect,ctx,g, jsonify, _request_ctx_stack
from db.dborm.dborm import TblChargerCommand, TblChargerCommandH, TblChargerInfo, TblCharging, TblChargingH
from db.dbinit import DBSession
from db.redis_init import GlobalRedisAccess, g_rds_access
from base.log import Log, g_log
import json
import functools
from apis.api_comm import *
import datetime
from base.comm_const import *
import random
from sqlalchemy.exc import SQLAlchemyError
from sqlalchemy.exc import DBAPIError
from redis.exceptions import RedisError

'''
功能：停止充电
1 app将停止充电指令发给server
2 server收到指令，在指令表中添加指令
3 将本次充电的信息返回给app，本次充电结束
输入：
user_id
sesion_id
command
'''

class stop_charging(MethodView):
    def post(self):
        inJsonData = json.loads(request.get_data())
        user_id = inJsonData['user_id']
        session_id = inJsonData['session_id']
        command = inJsonData['command']
        log=g_log.get_sys_log()
        now = datetime.datetime.now()
        try:
            db_session = DBSession()
            check_ret = check_session_id(user_id, session_id)
            if check_ret == const.REDIS_SESSION_ID_CORRECT :
                charging_info = db_session.query(TblCharging).filter(TblCharging.user_id == user_id).first()
                if charging_info:
                    charger_info = db_session.query(TblChargerInfo).filter(TblChargerInfo.charger_id = TblCharging.charger_id).first()
                    if charger_info == '03':
                        ret = add_command(charging_info.charger_id, '0', const.COMMAND_STOP_CHARGING)
                        if ret == const.RET_SUCCESS:
                            db_session.commit()
                            #包含本次充电的信息
                            return ret_func(const.RET_SUCCESS, '', {})
                        else:
                            #返回给app充电异常，本次充电结束，请直接拔枪，并把充电信息给它,放在{}
                            return ret_func(ret, '', {})
                    else:
                    	'''
                    	返回app桩的状态错误，充电结束
                    	'''
                else:
                    '''
                    返app桩的状态错误，充电结束
                    '''
            else:
                return ret_func(check_ret, '', {})
        except SQLAlchemyError, e:
            print type(e)
            log.debug(e)
            db_session.rollback()
            return ret_func(const.RET_DB_ERROR, '', {})
        except RedisError, e:
            print type(e)
            log.debug(e)
            db_session.rollback()
            return ret_func(const.RET_MEMDB_ERROR, '', {})
        finally :
            db_session.close()
